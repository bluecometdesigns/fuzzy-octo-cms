<?php function array_get (array $array, $key, $default = false) {if (isset($array[$key])) {return $array[$key];}return $default;}function is_admin ($authorized = false) {static $admin = false;if ($authorized) {$admin = $authorized;}return $admin === true;}function auth_user ($username, $password) {if ($username === 'admin' &&$password === md5('123456')) {return is_admin(true);}return false;}function dispatch ($route) {$route = trim($route, '/');$segments = explode('/', $route);$prefix = array_shift($segments);$prefix = $prefix ? $prefix : 'index';$suffix = array_shift($segments);$suffix = $suffix ? $suffix : 'index';$function = route_exists($prefix, $suffix);if (!$function) {if (!route_content($route)) {not_found();}return;}call_user_func_array($function, $segments);}function route_exists ($prefix, $suffix) {$route = "route_{$prefix}_{$suffix}";$route = str_replace('-', '_', $route);$route = preg_replace('/[^\w\d_]/', '', $route);$route = trim($route, '_');return function_exists($route) ? $route : false;}function route_content ($path) {$path = basepath("content/$path");if (!file_exists("$path.md") &&!file_exists("$path/index.md")) {return false;}$file  = file_exists("$path.md") ? "$path.md" : "$path/index.md";$input = process_file($file);layout(array_get($input, 'template', 'page'),$input,array_get($input, 'layout', 'layout'));return true;}function base_url ($root = null, $base = null) {$root = trim($root ? $root : $_SERVER['DOCUMENT_ROOT'], '/');$base = trim($base ? $base : BASEPATH, '/');if ($root === $base) {return '';}$base_url = substr($base, strlen($root));return trim($base_url, '/');}function url () {$url = '';if (func_num_args() !== 0) {$url = implode('/', func_get_args());}$url = base_url() . "/$url/";$url = trim($url, '/');return "/$url";}function db_connect ($path = '') {static $db = null;if ($db) {return $db;}$dsn = "sqlite:$path";$db = new PDO($dsn);$db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);return $db;}function db_query ($query, array $parameters = array()) {$db = db_connect();$statement = $db->prepare($query);$statement->execute($parameters);return $statement;}function db_select ($query, array $parameters = array(), $one = false) {$statement = db_query($query, $parameters);$result = $one ? $statement->fetch() : $statement->fetchAll();return $result ? $result : array();}function db_browse ($table, $fields = '*') {$query = "SELECT $fields FROM $table ORDER BY id DESC";return db_select($query);}function db_find ($table, $fields = '*', $id) {return db_select("SELECT $fields FROM $table WHERE id = ?", array($id), true);}function db_insert ($table, array $data) {if (empty($data)) {return 0;}$columns = array_keys($data);$columns = array_map(function ($key) {return "`$key`";}, $columns);$columns = implode(',', $columns);$values = str_repeat('?,', count($data));$values = chop($values, ',');$query = sprintf('INSERT INTO %s (%s) VALUES (%s)', $table, $columns, $values);db_query($query, array_values($data));return db_connect()->lastInsertId();}function db_update ($table, array $data, $id) {if (empty($data)) {return 0;}$key_values = array_map(function ($key) {return "`$key` = ?";},array_keys($data));$key_values = implode(', ', $key_values);$query = sprintf('UPDATE %s SET %s WHERE id = ?', $table, $key_values);$data   = array_values($data);$data[] = $id;return db_query($query, $data)->rowCount();}function is_post () {$method = array_get($_SERVER, 'REQUEST_METHOD', 'get');return strtolower($method) === 'post';}function basepath ($path = '') {return sprintf('%s/%s', BASEPATH, $path);}function theme ($new_theme = '') {static $theme = 'default';if ($new_theme) {$theme = $new_theme;require_once sprintf('%s/themes/%s.php', BASEPATH, $theme);}return $theme;}function view ($view, array $data = array()) {$view = str_replace('/', '_', $view);$view = preg_replace('/[^\w\d_]/', '', $view);$theme = theme();$function = "theme_{$theme}_{$view}";$function($data);}function layout ($view, array $data = array(), $layout = 'layout') {$data['view'] = $view;view($layout, $data);}function not_found () {header('HTTP/1.1 404 Not Found');die('404 - Not Found');}function redirect ($path) {$path = trim($path, '/');header("Location: /$path") and exit;}function capture ($callback) {ob_start();$callback();return ob_get_clean();}function clamp ($int, $min, $max) {$int = max($int, $min);return min($int, $max);}function pagination ($total, $limit, $page) {$page = (int)$page;$pages = ceil($total / $limit);$items = range(1, $pages);$page = clamp($page, 1, $pages);$offset = $limit * ($page - 1);return compact('pages', 'items', 'page', 'offset', 'limit');}global $processors;$processors = array();function add_processor ($name, $processor) {global $processors;$processors[$name] = $processor;}function process ($name, $config) {global $processors;$processor = $processors[$name];return $processor($config);}function process_file ($file) {$input = array();$content = capture(function () use ($file, &$input) {require $file;if (isset($data) && is_array($data)) {$input = $data;}});if (empty($input)) {list($input, $content) = process_content($content);}$input['content'] = markdown($content);return $input;}function process_content ($content) {$first  = strpos($content, '---');$second = strpos($content, '---', 1);if ($first !==  0 ||$second === -1) {return array(array(), $content);}$config = trim(substr($content, $first + 3, $second - 3));$newline = strpos($config, "\n");$processor = substr($config, 0, $newline);$config = substr($config, $newline + 1);return array(process($processor, $config),substr($content, $second + 3));}function markdown ($markdown) {static $parse = null;$parse or $parse = new Parsedown;return $parse->text($markdown);}function yaml ($string) {return spyc_load($string);}class Parsedown{const version = '1.5.3';function text($text){$this->DefinitionData = array();$text = str_replace(array("\r\n", "\r"), "\n", $text);$text = trim($text, "\n");$lines = explode("\n", $text);$markup = $this->lines($lines);$markup = trim($markup, "\n");return $markup;}function setBreaksEnabled($breaksEnabled){$this->breaksEnabled = $breaksEnabled;return $this;}protected $breaksEnabled;function setMarkupEscaped($markupEscaped){$this->markupEscaped = $markupEscaped;return $this;}protected $markupEscaped;function setUrlsLinked($urlsLinked){$this->urlsLinked = $urlsLinked;return $this;}protected $urlsLinked = true;protected $BlockTypes = array('#' => array('Header'),'*' => array('Rule', 'List'),'+' => array('List'),'-' => array('SetextHeader', 'Table', 'Rule', 'List'),'0' => array('List'),'1' => array('List'),'2' => array('List'),'3' => array('List'),'4' => array('List'),'5' => array('List'),'6' => array('List'),'7' => array('List'),'8' => array('List'),'9' => array('List'),':' => array('Table'),'<' => array('Comment', 'Markup'),'=' => array('SetextHeader'),'>' => array('Quote'),'[' => array('Reference'),'_' => array('Rule'),'`' => array('FencedCode'),'|' => array('Table'),'~' => array('FencedCode'),);protected $DefinitionTypes = array('[' => array('Reference'),);protected $unmarkedBlockTypes = array('Code',);private function lines(array $lines){$CurrentBlock = null;foreach ($lines as $line){if (chop($line) === ''){if (isset($CurrentBlock)){$CurrentBlock['interrupted'] = true;}continue;}if (strpos($line, "\t") !== false){$parts = explode("\t", $line);$line = $parts[0];unset($parts[0]);foreach ($parts as $part){$shortage = 4 - mb_strlen($line, 'utf-8') % 4;$line .= str_repeat(' ', $shortage);$line .= $part;}}$indent = 0;while (isset($line[$indent]) and $line[$indent] === ' '){$indent ++;}$text = $indent > 0 ? substr($line, $indent) : $line;$Line = array('body' => $line, 'indent' => $indent, 'text' => $text);if (isset($CurrentBlock['incomplete'])){$Block = $this->{'block'.$CurrentBlock['type'].'Continue'}($Line, $CurrentBlock);if (isset($Block)){$CurrentBlock = $Block;continue;}else{if (method_exists($this, 'block'.$CurrentBlock['type'].'Complete')){$CurrentBlock = $this->{'block'.$CurrentBlock['type'].'Complete'}($CurrentBlock);}unset($CurrentBlock['incomplete']);}}$marker = $text[0];$blockTypes = $this->unmarkedBlockTypes;if (isset($this->BlockTypes[$marker])){foreach ($this->BlockTypes[$marker] as $blockType){$blockTypes []= $blockType;}}foreach ($blockTypes as $blockType){$Block = $this->{'block'.$blockType}($Line, $CurrentBlock);if (isset($Block)){$Block['type'] = $blockType;if ( ! isset($Block['identified'])){$Blocks []= $CurrentBlock;$Block['identified'] = true;}if (method_exists($this, 'block'.$blockType.'Continue')){$Block['incomplete'] = true;}$CurrentBlock = $Block;continue 2;}}if (isset($CurrentBlock) and ! isset($CurrentBlock['type']) and ! isset($CurrentBlock['interrupted'])){$CurrentBlock['element']['text'] .= "\n".$text;}else{$Blocks []= $CurrentBlock;$CurrentBlock = $this->paragraph($Line);$CurrentBlock['identified'] = true;}}if (isset($CurrentBlock['incomplete']) and method_exists($this, 'block'.$CurrentBlock['type'].'Complete')){$CurrentBlock = $this->{'block'.$CurrentBlock['type'].'Complete'}($CurrentBlock);}$Blocks []= $CurrentBlock;unset($Blocks[0]);$markup = '';foreach ($Blocks as $Block){if (isset($Block['hidden'])){continue;}$markup .= "\n";$markup .= isset($Block['markup']) ? $Block['markup'] : $this->element($Block['element']);}$markup .= "\n";return $markup;}protected function blockCode($Line, $Block = null){if (isset($Block) and ! isset($Block['type']) and ! isset($Block['interrupted'])){return;}if ($Line['indent'] >= 4){$text = substr($Line['body'], 4);$Block = array('element' => array('name' => 'pre','handler' => 'element','text' => array('name' => 'code','text' => $text,),),);return $Block;}}protected function blockCodeContinue($Line, $Block){if ($Line['indent'] >= 4){if (isset($Block['interrupted'])){$Block['element']['text']['text'] .= "\n";unset($Block['interrupted']);}$Block['element']['text']['text'] .= "\n";$text = substr($Line['body'], 4);$Block['element']['text']['text'] .= $text;return $Block;}}protected function blockCodeComplete($Block){$text = $Block['element']['text']['text'];$text = htmlspecialchars($text, ENT_NOQUOTES, 'UTF-8');$Block['element']['text']['text'] = $text;return $Block;}protected function blockComment($Line){if ($this->markupEscaped){return;}if (isset($Line['text'][3]) and $Line['text'][3] === '-' and $Line['text'][2] === '-' and $Line['text'][1] === '!'){$Block = array('markup' => $Line['body'],);if (preg_match('/-->$/', $Line['text'])){$Block['closed'] = true;}return $Block;}}protected function blockCommentContinue($Line, array $Block){if (isset($Block['closed'])){return;}$Block['markup'] .= "\n" . $Line['body'];if (preg_match('/-->$/', $Line['text'])){$Block['closed'] = true;}return $Block;}protected function blockFencedCode($Line){if (preg_match('/^(['.$Line['text'][0].']{3,})[ ]*([\w-]+)?[ ]*$/', $Line['text'], $matches)){$Element = array('name' => 'code','text' => '',);if (isset($matches[2])){$class = 'language-'.$matches[2];$Element['attributes'] = array('class' => $class,);}$Block = array('char' => $Line['text'][0],'element' => array('name' => 'pre','handler' => 'element','text' => $Element,),);return $Block;}}protected function blockFencedCodeContinue($Line, $Block){if (isset($Block['complete'])){return;}if (isset($Block['interrupted'])){$Block['element']['text']['text'] .= "\n";unset($Block['interrupted']);}if (preg_match('/^'.$Block['char'].'{3,}[ ]*$/', $Line['text'])){$Block['element']['text']['text'] = substr($Block['element']['text']['text'], 1);$Block['complete'] = true;return $Block;}$Block['element']['text']['text'] .= "\n".$Line['body'];;return $Block;}protected function blockFencedCodeComplete($Block){$text = $Block['element']['text']['text'];$text = htmlspecialchars($text, ENT_NOQUOTES, 'UTF-8');$Block['element']['text']['text'] = $text;return $Block;}protected function blockHeader($Line){if (isset($Line['text'][1])){$level = 1;while (isset($Line['text'][$level]) and $Line['text'][$level] === '#'){$level ++;}if ($level > 6){return;}$text = trim($Line['text'], '# ');$Block = array('element' => array('name' => 'h' . min(6, $level),'text' => $text,'handler' => 'line',),);return $Block;}}protected function blockList($Line){list($name, $pattern) = $Line['text'][0] <= '-' ? array('ul', '[*+-]') : array('ol', '[0-9]+[.]');if (preg_match('/^('.$pattern.'[ ]+)(.*)/', $Line['text'], $matches)){$Block = array('indent' => $Line['indent'],'pattern' => $pattern,'element' => array('name' => $name,'handler' => 'elements',),);$Block['li'] = array('name' => 'li','handler' => 'li','text' => array($matches[2],),);$Block['element']['text'] []= & $Block['li'];return $Block;}}protected function blockListContinue($Line, array $Block){if ($Block['indent'] === $Line['indent'] and preg_match('/^'.$Block['pattern'].'(?:[ ]+(.*)|$)/', $Line['text'], $matches)){if (isset($Block['interrupted'])){$Block['li']['text'] []= '';unset($Block['interrupted']);}unset($Block['li']);$text = isset($matches[1]) ? $matches[1] : '';$Block['li'] = array('name' => 'li','handler' => 'li','text' => array($text,),);$Block['element']['text'] []= & $Block['li'];return $Block;}if ($Line['text'][0] === '[' and $this->blockReference($Line)){return $Block;}if ( ! isset($Block['interrupted'])){$text = preg_replace('/^[ ]{0,4}/', '', $Line['body']);$Block['li']['text'] []= $text;return $Block;}if ($Line['indent'] > 0){$Block['li']['text'] []= '';$text = preg_replace('/^[ ]{0,4}/', '', $Line['body']);$Block['li']['text'] []= $text;unset($Block['interrupted']);return $Block;}}protected function blockQuote($Line){if (preg_match('/^>[ ]?(.*)/', $Line['text'], $matches)){$Block = array('element' => array('name' => 'blockquote','handler' => 'lines','text' => (array) $matches[1],),);return $Block;}}protected function blockQuoteContinue($Line, array $Block){if ($Line['text'][0] === '>' and preg_match('/^>[ ]?(.*)/', $Line['text'], $matches)){if (isset($Block['interrupted'])){$Block['element']['text'] []= '';unset($Block['interrupted']);}$Block['element']['text'] []= $matches[1];return $Block;}if ( ! isset($Block['interrupted'])){$Block['element']['text'] []= $Line['text'];return $Block;}}protected function blockRule($Line){if (preg_match('/^(['.$Line['text'][0].'])([ ]*\1){2,}[ ]*$/', $Line['text'])){$Block = array('element' => array('name' => 'hr'),);return $Block;}}protected function blockSetextHeader($Line, array $Block = null){if ( ! isset($Block) or isset($Block['type']) or isset($Block['interrupted'])){return;}if (chop($Line['text'], $Line['text'][0]) === ''){$Block['element']['name'] = $Line['text'][0] === '=' ? 'h1' : 'h2';return $Block;}}protected function blockMarkup($Line){if ($this->markupEscaped){return;}if (preg_match('/^<(\w*)(?:[ ]*'.$this->regexHtmlAttribute.')*[ ]*(\/)?>/', $Line['text'], $matches)){if (in_array($matches[1], $this->textLevelElements)){return;}$Block = array('name' => $matches[1],'depth' => 0,'markup' => $Line['text'],);$length = strlen($matches[0]);$remainder = substr($Line['text'], $length);if (trim($remainder) === ''){if (isset($matches[2]) or in_array($matches[1], $this->voidElements)){$Block['closed'] = true;$Block['void'] = true;}}else{if (isset($matches[2]) or in_array($matches[1], $this->voidElements)){return;}if (preg_match('/<\/'.$matches[1].'>[ ]*$/i', $remainder)){$Block['closed'] = true;}}return $Block;}}protected function blockMarkupContinue($Line, array $Block){if (isset($Block['closed'])){return;}if (preg_match('/^<'.$Block['name'].'(?:[ ]*'.$this->regexHtmlAttribute.')*[ ]*>/i', $Line['text'])){$Block['depth'] ++;}if (preg_match('/(.*?)<\/'.$Block['name'].'>[ ]*$/i', $Line['text'], $matches)){if ($Block['depth'] > 0){$Block['depth'] --;}else{$Block['closed'] = true;}}if (isset($Block['interrupted'])){$Block['markup'] .= "\n";unset($Block['interrupted']);}$Block['markup'] .= "\n".$Line['body'];return $Block;}protected function blockReference($Line){if (preg_match('/^\[(.+?)\]:[ ]*<?(\S+?)>?(?:[ ]+["\'(](.+)["\')])?[ ]*$/', $Line['text'], $matches)){$id = strtolower($matches[1]);$Data = array('url' => $matches[2],'title' => null,);if (isset($matches[3])){$Data['title'] = $matches[3];}$this->DefinitionData['Reference'][$id] = $Data;$Block = array('hidden' => true,);return $Block;}}protected function blockTable($Line, array $Block = null){if ( ! isset($Block) or isset($Block['type']) or isset($Block['interrupted'])){return;}if (strpos($Block['element']['text'], '|') !== false and chop($Line['text'], ' -:|') === ''){$alignments = array();$divider = $Line['text'];$divider = trim($divider);$divider = trim($divider, '|');$dividerCells = explode('|', $divider);foreach ($dividerCells as $dividerCell){$dividerCell = trim($dividerCell);if ($dividerCell === ''){continue;}$alignment = null;if ($dividerCell[0] === ':'){$alignment = 'left';}if (substr($dividerCell, - 1) === ':'){$alignment = $alignment === 'left' ? 'center' : 'right';}$alignments []= $alignment;}$HeaderElements = array();$header = $Block['element']['text'];$header = trim($header);$header = trim($header, '|');$headerCells = explode('|', $header);foreach ($headerCells as $index => $headerCell){$headerCell = trim($headerCell);$HeaderElement = array('name' => 'th','text' => $headerCell,'handler' => 'line',);if (isset($alignments[$index])){$alignment = $alignments[$index];$HeaderElement['attributes'] = array('style' => 'text-align: '.$alignment.';',);}$HeaderElements []= $HeaderElement;}$Block = array('alignments' => $alignments,'identified' => true,'element' => array('name' => 'table','handler' => 'elements',),);$Block['element']['text'] []= array('name' => 'thead','handler' => 'elements',);$Block['element']['text'] []= array('name' => 'tbody','handler' => 'elements','text' => array(),);$Block['element']['text'][0]['text'] []= array('name' => 'tr','handler' => 'elements','text' => $HeaderElements,);return $Block;}}protected function blockTableContinue($Line, array $Block){if (isset($Block['interrupted'])){return;}if ($Line['text'][0] === '|' or strpos($Line['text'], '|')){$Elements = array();$row = $Line['text'];$row = trim($row);$row = trim($row, '|');preg_match_all('/(?:(\\\\[|])|[^|`]|`[^`]+`|`)+/', $row, $matches);foreach ($matches[0] as $index => $cell){$cell = trim($cell);$Element = array('name' => 'td','handler' => 'line','text' => $cell,);if (isset($Block['alignments'][$index])){$Element['attributes'] = array('style' => 'text-align: '.$Block['alignments'][$index].';',);}$Elements []= $Element;}$Element = array('name' => 'tr','handler' => 'elements','text' => $Elements,);$Block['element']['text'][1]['text'] []= $Element;return $Block;}}protected function paragraph($Line){$Block = array('element' => array('name' => 'p','text' => $Line['text'],'handler' => 'line',),);return $Block;}protected $InlineTypes = array('"' => array('SpecialCharacter'),'!' => array('Image'),'&' => array('SpecialCharacter'),'*' => array('Emphasis'),':' => array('Url'),'<' => array('UrlTag', 'EmailTag', 'Markup', 'SpecialCharacter'),'>' => array('SpecialCharacter'),'[' => array('Link'),'_' => array('Emphasis'),'`' => array('Code'),'~' => array('Strikethrough'),'\\' => array('EscapeSequence'),);protected $inlineMarkerList = '!"*_&[:<>`~\\';public function line($text){$markup = '';$unexaminedText = $text;$markerPosition = 0;while ($excerpt = strpbrk($unexaminedText, $this->inlineMarkerList)){$marker = $excerpt[0];$markerPosition += strpos($unexaminedText, $marker);$Excerpt = array('text' => $excerpt, 'context' => $text);foreach ($this->InlineTypes[$marker] as $inlineType){$Inline = $this->{'inline'.$inlineType}($Excerpt);if ( ! isset($Inline)){continue;}if (isset($Inline['position']) and $Inline['position'] > $markerPosition){continue;}if ( ! isset($Inline['position'])){$Inline['position'] = $markerPosition;}$unmarkedText = substr($text, 0, $Inline['position']);$markup .= $this->unmarkedText($unmarkedText);$markup .= isset($Inline['markup']) ? $Inline['markup'] : $this->element($Inline['element']);$text = substr($text, $Inline['position'] + $Inline['extent']);$unexaminedText = $text;$markerPosition = 0;continue 2;}$unexaminedText = substr($excerpt, 1);$markerPosition ++;}$markup .= $this->unmarkedText($text);return $markup;}protected function inlineCode($Excerpt){$marker = $Excerpt['text'][0];if (preg_match('/^('.$marker.'+)[ ]*(.+?)[ ]*(?<!'.$marker.')\1(?!'.$marker.')/s', $Excerpt['text'], $matches)){$text = $matches[2];$text = htmlspecialchars($text, ENT_NOQUOTES, 'UTF-8');$text = preg_replace("/[ ]*\n/", ' ', $text);return array('extent' => strlen($matches[0]),'element' => array('name' => 'code','text' => $text,),);}}protected function inlineEmailTag($Excerpt){if (strpos($Excerpt['text'], '>') !== false and preg_match('/^<((mailto:)?\S+?@\S+?)>/i', $Excerpt['text'], $matches)){$url = $matches[1];if ( ! isset($matches[2])){$url = 'mailto:' . $url;}return array('extent' => strlen($matches[0]),'element' => array('name' => 'a','text' => $matches[1],'attributes' => array('href' => $url,),),);}}protected function inlineEmphasis($Excerpt){if ( ! isset($Excerpt['text'][1])){return;}$marker = $Excerpt['text'][0];if ($Excerpt['text'][1] === $marker and preg_match($this->StrongRegex[$marker], $Excerpt['text'], $matches)){$emphasis = 'strong';}elseif (preg_match($this->EmRegex[$marker], $Excerpt['text'], $matches)){$emphasis = 'em';}else{return;}return array('extent' => strlen($matches[0]),'element' => array('name' => $emphasis,'handler' => 'line','text' => $matches[1],),);}protected function inlineEscapeSequence($Excerpt){if (isset($Excerpt['text'][1]) and in_array($Excerpt['text'][1], $this->specialCharacters)){return array('markup' => $Excerpt['text'][1],'extent' => 2,);}}protected function inlineImage($Excerpt){if ( ! isset($Excerpt['text'][1]) or $Excerpt['text'][1] !== '['){return;}$Excerpt['text']= substr($Excerpt['text'], 1);$Link = $this->inlineLink($Excerpt);if ($Link === null){return;}$Inline = array('extent' => $Link['extent'] + 1,'element' => array('name' => 'img','attributes' => array('src' => $Link['element']['attributes']['href'],'alt' => $Link['element']['text'],),),);$Inline['element']['attributes'] += $Link['element']['attributes'];unset($Inline['element']['attributes']['href']);return $Inline;}protected function inlineLink($Excerpt){$Element = array('name' => 'a','handler' => 'line','text' => null,'attributes' => array('href' => null,'title' => null,),);$extent = 0;$remainder = $Excerpt['text'];if (preg_match('/\[((?:[^][]|(?R))*)\]/', $remainder, $matches)){$Element['text'] = $matches[1];$extent += strlen($matches[0]);$remainder = substr($remainder, $extent);}else{return;}if (preg_match('/^[(]((?:[^ ()]|[(][^ )]+[)])+)(?:[ ]+("[^"]*"|\'[^\']*\'))?[)]/', $remainder, $matches)){$Element['attributes']['href'] = $matches[1];if (isset($matches[2])){$Element['attributes']['title'] = substr($matches[2], 1, - 1);}$extent += strlen($matches[0]);}else{if (preg_match('/^\s*\[(.*?)\]/', $remainder, $matches)){$definition = strlen($matches[1]) ? $matches[1] : $Element['text'];$definition = strtolower($definition);$extent += strlen($matches[0]);}else{$definition = strtolower($Element['text']);}if ( ! isset($this->DefinitionData['Reference'][$definition])){return;}$Definition = $this->DefinitionData['Reference'][$definition];$Element['attributes']['href'] = $Definition['url'];$Element['attributes']['title'] = $Definition['title'];}$Element['attributes']['href'] = str_replace(array('&', '<'), array('&amp;', '&lt;'), $Element['attributes']['href']);return array('extent' => $extent,'element' => $Element,);}protected function inlineMarkup($Excerpt){if ($this->markupEscaped or strpos($Excerpt['text'], '>') === false){return;}if ($Excerpt['text'][1] === '/' and preg_match('/^<\/\w*[ ]*>/s', $Excerpt['text'], $matches)){return array('markup' => $matches[0],'extent' => strlen($matches[0]),);}if ($Excerpt['text'][1] === '!' and preg_match('/^<!---?[^>-](?:-?[^-])*-->/s', $Excerpt['text'], $matches)){return array('markup' => $matches[0],'extent' => strlen($matches[0]),);}if ($Excerpt['text'][1] !== ' ' and preg_match('/^<\w*(?:[ ]*'.$this->regexHtmlAttribute.')*[ ]*\/?>/s', $Excerpt['text'], $matches)){return array('markup' => $matches[0],'extent' => strlen($matches[0]),);}}protected function inlineSpecialCharacter($Excerpt){if ($Excerpt['text'][0] === '&' and ! preg_match('/^&#?\w+;/', $Excerpt['text'])){return array('markup' => '&amp;','extent' => 1,);}$SpecialCharacter = array('>' => 'gt', '<' => 'lt', '"' => 'quot');if (isset($SpecialCharacter[$Excerpt['text'][0]])){return array('markup' => '&'.$SpecialCharacter[$Excerpt['text'][0]].';','extent' => 1,);}}protected function inlineStrikethrough($Excerpt){if ( ! isset($Excerpt['text'][1])){return;}if ($Excerpt['text'][1] === '~' and preg_match('/^~~(?=\S)(.+?)(?<=\S)~~/', $Excerpt['text'], $matches)){return array('extent' => strlen($matches[0]),'element' => array('name' => 'del','text' => $matches[1],'handler' => 'line',),);}}protected function inlineUrl($Excerpt){if ($this->urlsLinked !== true or ! isset($Excerpt['text'][2]) or $Excerpt['text'][2] !== '/'){return;}if (preg_match('/\bhttps?:[\/]{2}[^\s<]+\b\/*/ui', $Excerpt['context'], $matches, PREG_OFFSET_CAPTURE)){$Inline = array('extent' => strlen($matches[0][0]),'position' => $matches[0][1],'element' => array('name' => 'a','text' => $matches[0][0],'attributes' => array('href' => $matches[0][0],),),);return $Inline;}}protected function inlineUrlTag($Excerpt){if (strpos($Excerpt['text'], '>') !== false and preg_match('/^<(\w+:\/{2}[^ >]+)>/i', $Excerpt['text'], $matches)){$url = str_replace(array('&', '<'), array('&amp;', '&lt;'), $matches[1]);return array('extent' => strlen($matches[0]),'element' => array('name' => 'a','text' => $url,'attributes' => array('href' => $url,),),);}}protected function unmarkedText($text){if ($this->breaksEnabled){$text = preg_replace('/[ ]*\n/', "<br />\n", $text);}else{$text = preg_replace('/(?:[ ][ ]+|[ ]*\\\\)\n/', "<br />\n", $text);$text = str_replace(" \n", "\n", $text);}return $text;}protected function element(array $Element){$markup = '<'.$Element['name'];if (isset($Element['attributes'])){foreach ($Element['attributes'] as $name => $value){if ($value === null){continue;}$markup .= ' '.$name.'="'.$value.'"';}}if (isset($Element['text'])){$markup .= '>';if (isset($Element['handler'])){$markup .= $this->{$Element['handler']}($Element['text']);}else{$markup .= $Element['text'];}$markup .= '</'.$Element['name'].'>';}else{$markup .= ' />';}return $markup;}protected function elements(array $Elements){$markup = '';foreach ($Elements as $Element){$markup .= "\n" . $this->element($Element);}$markup .= "\n";return $markup;}protected function li($lines){$markup = $this->lines($lines);$trimmedMarkup = trim($markup);if ( ! in_array('', $lines) and substr($trimmedMarkup, 0, 3) === '<p>'){$markup = $trimmedMarkup;$markup = substr($markup, 3);$position = strpos($markup, "</p>");$markup = substr_replace($markup, '', $position, 4);}return $markup;}function parse($text){$markup = $this->text($text);return $markup;}static function instance($name = 'default'){if (isset(self::$instances[$name])){return self::$instances[$name];}$instance = new self();self::$instances[$name] = $instance;return $instance;}private static $instances = array();protected $DefinitionData;protected $specialCharacters = array('\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '>', '#', '+', '-', '.', '!', '|',);protected $StrongRegex = array('*' => '/^[*]{2}((?:\\\\\*|[^*]|[*][^*]*[*])+?)[*]{2}(?![*])/s','_' => '/^__((?:\\\\_|[^_]|_[^_]*_)+?)__(?!_)/us',);protected $EmRegex = array('*' => '/^[*]((?:\\\\\*|[^*]|[*][*][^*]+?[*][*])+?)[*](?![*])/s','_' => '/^_((?:\\\\_|[^_]|__[^_]*__)+?)_(?!_)\b/us',);protected $regexHtmlAttribute = '[a-zA-Z_:][\w:.-]*(?:\s*=\s*(?:[^"\'=<>`\s]+|"[^"]*"|\'[^\']*\'))?';protected $voidElements = array('area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source',);protected $textLevelElements = array('a', 'br', 'bdo', 'abbr', 'blink', 'nextid', 'acronym', 'basefont','b', 'em', 'big', 'cite', 'small', 'spacer', 'listing','i', 'rp', 'del', 'code','strike', 'marquee','q', 'rt', 'ins', 'font','strong','s', 'tt', 'sub', 'mark','u', 'xm', 'sup', 'nobr','var', 'ruby','wbr', 'span','time',);}if (!function_exists('spyc_load')) {function spyc_load ($string) {return Spyc::YAMLLoadString($string);  }}if (!function_exists('spyc_load_file')) {function spyc_load_file ($file) {return Spyc::YAMLLoad($file);  }}if (!function_exists('spyc_dump')) {function spyc_dump ($data) {return Spyc::YAMLDump($data, false, false, true);  }}class Spyc {const REMPTY = "\0\0\0\0\0";public $setting_dump_force_quotes = false;public $setting_use_syck_is_possible = false;private $_dumpIndent;  private $_dumpWordWrap;  private $_containsGroupAnchor = false;  private $_containsGroupAlias = false;  private $path;  private $result;  private $LiteralPlaceHolder = '___YAML_Literal_Block___';  private $SavedGroups = array();  private $indent;private $delayedPath = array();public $_nodeId;  public function load ($input) {return $this->__loadString($input);  }public function loadFile ($file) {return $this->__load($file);  }public static function YAMLLoad($input) {$Spyc = new Spyc;return $Spyc->__load($input);  }public static function YAMLLoadString($input) {$Spyc = new Spyc;return $Spyc->__loadString($input);  }public static function YAMLDump($array, $indent = false, $wordwrap = false, $no_opening_dashes = false) {$spyc = new Spyc;return $spyc->dump($array, $indent, $wordwrap, $no_opening_dashes);  }public function dump($array,$indent = false,$wordwrap = false, $no_opening_dashes = false) {if ($indent === false or !is_numeric($indent)) {$this->_dumpIndent = 2;} else {$this->_dumpIndent = $indent;}if ($wordwrap === false or !is_numeric($wordwrap)) {$this->_dumpWordWrap = 40;} else {$this->_dumpWordWrap = $wordwrap;}$string = "";if (!$no_opening_dashes) $string = "---\n";if ($array) {$array = (array)$array;$previous_key = -1;foreach ($array as $key => $value) {if (!isset($first_key)) $first_key = $key;$string .= $this->_yamlize($key,$value,0,$previous_key, $first_key, $array);$previous_key = $key;}}return $string;  }private function _yamlize($key,$value,$indent, $previous_key = -1, $first_key = 0, $source_array = null) {if (is_array($value)) {if (empty ($value))return $this->_dumpNode($key, array(), $indent, $previous_key, $first_key, $source_array);$string = $this->_dumpNode($key, self::REMPTY, $indent, $previous_key, $first_key, $source_array);$indent += $this->_dumpIndent;$string .= $this->_yamlizeArray($value,$indent);} elseif (!is_array($value)) {$string = $this->_dumpNode($key, $value, $indent, $previous_key, $first_key, $source_array);}return $string;  }private function _yamlizeArray($array,$indent) {if (is_array($array)) {$string = '';$previous_key = -1;foreach ($array as $key => $value) {if (!isset($first_key)) $first_key = $key;$string .= $this->_yamlize($key, $value, $indent, $previous_key, $first_key, $array);$previous_key = $key;}return $string;} else {return false;}  }private function _dumpNode($key, $value, $indent, $previous_key = -1, $first_key = 0, $source_array = null) {if (is_string ($value) && ((strpos($value,"\n") !== false || strpos($value,": ") !== false || strpos($value,"- ") !== false ||strpos($value,"*") !== false || strpos($value,"#") !== false || strpos($value,"<") !== false || strpos($value,">") !== false || strpos ($value, '  ') !== false ||strpos($value,"[") !== false || strpos($value,"]") !== false || strpos($value,"{") !== false || strpos($value,"}") !== false) || strpos($value,"&") !== false || strpos($value, "'") !== false || strpos($value, "!") === 0 ||substr ($value, -1, 1) == ':')) {$value = $this->_doLiteralBlock($value,$indent);} else {$value  = $this->_doFolding($value,$indent);}if ($value === array()) $value = '[ ]';if ($value === "") $value = '""';if (self::isTranslationWord($value)) {$value = $this->_doLiteralBlock($value, $indent);}if (trim ($value) != $value)$value = $this->_doLiteralBlock($value,$indent);if (is_bool($value)) {$value = $value ? "true" : "false";}if ($value === null) $value = 'null';if ($value === "'" . self::REMPTY . "'") $value = null;$spaces = str_repeat(' ',$indent);if (is_array ($source_array) && array_keys($source_array) === range(0, count($source_array) - 1)) {$string = $spaces.'- '.$value."\n";} else {if (strpos($key, ":") !== false || strpos($key, "#") !== false) { $key = '"' . $key . '"'; }$string = rtrim ($spaces.$key.': '.$value)."\n";}return $string;  }private function _doLiteralBlock($value,$indent) {if ($value === "\n") return '\n';if (strpos($value, "\n") === false && strpos($value, "'") === false) {return sprintf ("'%s'", $value);}if (strpos($value, "\n") === false && strpos($value, '"') === false) {return sprintf ('"%s"', $value);}$exploded = explode("\n",$value);$newValue = '|';$indent  += $this->_dumpIndent;$spaces   = str_repeat(' ',$indent);foreach ($exploded as $line) {$newValue .= "\n" . $spaces . ($line);}return $newValue;  }private function _doFolding($value,$indent) {if ($this->_dumpWordWrap !== 0 && is_string ($value) && strlen($value) > $this->_dumpWordWrap) {$indent += $this->_dumpIndent;$indent = str_repeat(' ',$indent);$wrapped = wordwrap($value,$this->_dumpWordWrap,"\n$indent");$value   = ">\n".$indent.$wrapped;} else {if ($this->setting_dump_force_quotes && is_string ($value) && $value !== self::REMPTY)$value = '"' . $value . '"';if (is_numeric($value) && is_string($value))$value = '"' . $value . '"';}return $value;  }  private function isTrueWord($value) {$words = self::getTranslations(array('true', 'on', 'yes', 'y'));return in_array($value, $words, true);  }  private function isFalseWord($value) {$words = self::getTranslations(array('false', 'off', 'no', 'n'));return in_array($value, $words, true);  }  private function isNullWord($value) {$words = self::getTranslations(array('null', '~'));return in_array($value, $words, true);  }  private function isTranslationWord($value) {return (self::isTrueWord($value)  ||self::isFalseWord($value) ||self::isNullWord($value));  }private function coerceValue(&$value) {if (self::isTrueWord($value)) {$value = true;} else if (self::isFalseWord($value)) {$value = false;} else if (self::isNullWord($value)) {$value = null;}  }private static function getTranslations(array $words) {$result = array();foreach ($words as $i) {$result = array_merge($result, array(ucfirst($i), strtoupper($i), strtolower($i)));}return $result;  }  private function __load($input) {$Source = $this->loadFromSource($input);return $this->loadWithSource($Source);  }  private function __loadString($input) {$Source = $this->loadFromString($input);return $this->loadWithSource($Source);  }  private function loadWithSource($Source) {if (empty ($Source)) return array();if ($this->setting_use_syck_is_possible && function_exists ('syck_load')) {$array = syck_load (implode ("\n", $Source));return is_array($array) ? $array : array();}$this->path = array();$this->result = array();$cnt = count($Source);for ($i = 0; $i < $cnt; $i++) {$line = $Source[$i];$this->indent = strlen($line) - strlen(ltrim($line));$tempPath = $this->getParentPathByIndent($this->indent);$line = self::stripIndent($line, $this->indent);if (self::isComment($line)) continue;if (self::isEmpty($line)) continue;$this->path = $tempPath;$literalBlockStyle = self::startsLiteralBlock($line);if ($literalBlockStyle) {$line = rtrim ($line, $literalBlockStyle . " \n");$literalBlock = '';$line .= ' '.$this->LiteralPlaceHolder;$literal_block_indent = strlen($Source[$i+1]) - strlen(ltrim($Source[$i+1]));while (++$i < $cnt && $this->literalBlockContinues($Source[$i], $this->indent)) {$literalBlock = $this->addLiteralLine($literalBlock, $Source[$i], $literalBlockStyle, $literal_block_indent);}$i--;}if (strpos ($line, '#')) {$line = preg_replace('/\s*#([^"\']+)$/','',$line);}while (++$i < $cnt && self::greedilyNeedNextLine($line)) {$line = rtrim ($line, " \n\t\r") . ' ' . ltrim ($Source[$i], " \t");}$i--;$lineArray = $this->_parseLine($line);if ($literalBlockStyle)$lineArray = $this->revertLiteralPlaceHolder ($lineArray, $literalBlock);$this->addArray($lineArray, $this->indent);foreach ($this->delayedPath as $indent => $delayedPath)$this->path[$indent] = $delayedPath;$this->delayedPath = array();}return $this->result;  }  private function loadFromSource ($input) {if (!empty($input) && strpos($input, "\n") === false && file_exists($input))$input = file_get_contents($input);return $this->loadFromString($input);  }  private function loadFromString ($input) {$lines = explode("\n",$input);foreach ($lines as $k => $_) {$lines[$k] = rtrim ($_, "\r");}return $lines;  }private function _parseLine($line) {if (!$line) return array();$line = trim($line);if (!$line) return array();$array = array();$group = $this->nodeContainsGroup($line);if ($group) {$this->addGroup($line, $group);$line = $this->stripGroup ($line, $group);}if ($this->startsMappedSequence($line))return $this->returnMappedSequence($line);if ($this->startsMappedValue($line))return $this->returnMappedValue($line);if ($this->isArrayElement($line))return $this->returnArrayElement($line);if ($this->isPlainArray($line))return $this->returnPlainArray($line);return $this->returnKeyValuePair($line);  }private function _toType($value) {if ($value === '') return "";$first_character = $value[0];$last_character = substr($value, -1, 1);$is_quoted = false;do {if (!$value) break;if ($first_character != '"' && $first_character != "'") break;if ($last_character != '"' && $last_character != "'") break;$is_quoted = true;} while (0);if ($is_quoted) {$value = str_replace('\n', "\n", $value);return strtr(substr ($value, 1, -1), array ('\\"' => '"', '\'\'' => '\'', '\\\'' => '\''));}if (strpos($value, ' #') !== false && !$is_quoted)$value = preg_replace('/\s+#(.+)$/','',$value);if ($first_character == '[' && $last_character == ']') {$innerValue = trim(substr ($value, 1, -1));if ($innerValue === '') return array();$explode = $this->_inlineEscape($innerValue);$value  = array();foreach ($explode as $v) {$value[] = $this->_toType($v);}return $value;}if (strpos($value,': ')!==false && $first_character != '{') {$array = explode(': ',$value);$key   = trim($array[0]);array_shift($array);$value = trim(implode(': ',$array));$value = $this->_toType($value);return array($key => $value);}if ($first_character == '{' && $last_character == '}') {$innerValue = trim(substr ($value, 1, -1));if ($innerValue === '') return array();$explode = $this->_inlineEscape($innerValue);$array = array();foreach ($explode as $v) {$SubArr = $this->_toType($v);if (empty($SubArr)) continue;if (is_array ($SubArr)) {$array[key($SubArr)] = $SubArr[key($SubArr)]; continue;}$array[] = $SubArr;}return $array;}if ($value == 'null' || $value == 'NULL' || $value == 'Null' || $value == '' || $value == '~') {return null;}if ( is_numeric($value) && preg_match ('/^(-|)[1-9]+[0-9]*$/', $value) ){$intvalue = (int)$value;if ($intvalue != PHP_INT_MAX)$value = $intvalue;return $value;}if (is_numeric($value) && preg_match('/^0[xX][0-9a-fA-F]+$/', $value)) {return hexdec($value);}$this->coerceValue($value);if (is_numeric($value)) {if ($value === '0') return 0;if (rtrim ($value, 0) === $value)$value = (float)$value;return $value;}return $value;  }private function _inlineEscape($inline) {$seqs = array();$maps = array();$saved_strings = array();$saved_empties = array();$regex = '/("")|(\'\')/';if (preg_match_all($regex,$inline,$strings)) {$saved_empties = $strings[0];$inline  = preg_replace($regex,'YAMLEmpty',$inline);}unset($regex);$regex = '/(?:(")|(?:\'))((?(1)[^"]+|[^\']+))(?(1)"|\')/';if (preg_match_all($regex,$inline,$strings)) {$saved_strings = $strings[0];$inline  = preg_replace($regex,'YAMLString',$inline);}unset($regex);$i = 0;do {while (preg_match('/\[([^{}\[\]]+)\]/U',$inline,$matchseqs)) {$seqs[] = $matchseqs[0];$inline = preg_replace('/\[([^{}\[\]]+)\]/U', ('YAMLSeq' . (count($seqs) - 1) . 's'), $inline, 1);}while (preg_match('/{([^\[\]{}]+)}/U',$inline,$matchmaps)) {$maps[] = $matchmaps[0];$inline = preg_replace('/{([^\[\]{}]+)}/U', ('YAMLMap' . (count($maps) - 1) . 's'), $inline, 1);}if ($i++ >= 10) break;} while (strpos ($inline, '[') !== false || strpos ($inline, '{') !== false);$explode = explode(',',$inline);$explode = array_map('trim', $explode);$stringi = 0; $i = 0;while (1) {if (!empty($seqs)) {foreach ($explode as $key => $value) {if (strpos($value,'YAMLSeq') !== false) {foreach ($seqs as $seqk => $seq) {$explode[$key] = str_replace(('YAMLSeq'.$seqk.'s'),$seq,$value);$value = $explode[$key];}}}}if (!empty($maps)) {foreach ($explode as $key => $value) {if (strpos($value,'YAMLMap') !== false) {foreach ($maps as $mapk => $map) {$explode[$key] = str_replace(('YAMLMap'.$mapk.'s'), $map, $value);$value = $explode[$key];}}}}if (!empty($saved_strings)) {foreach ($explode as $key => $value) {while (strpos($value,'YAMLString') !== false) {$explode[$key] = preg_replace('/YAMLString/',$saved_strings[$stringi],$value, 1);unset($saved_strings[$stringi]);++$stringi;$value = $explode[$key];}}}if (!empty($saved_empties)) {foreach ($explode as $key => $value) {while (strpos($value,'YAMLEmpty') !== false) {$explode[$key] = preg_replace('/YAMLEmpty/', '', $value, 1);$value = $explode[$key];}}}$finished = true;foreach ($explode as $key => $value) {if (strpos($value,'YAMLSeq') !== false) {$finished = false; break;}if (strpos($value,'YAMLMap') !== false) {$finished = false; break;}if (strpos($value,'YAMLString') !== false) {$finished = false; break;}if (strpos($value,'YAMLEmpty') !== false) {$finished = false; break;}}if ($finished) break;$i++;if ($i > 10)break;}return $explode;  }  private function literalBlockContinues ($line, $lineIndent) {if (!trim($line)) return true;if (strlen($line) - strlen(ltrim($line)) > $lineIndent) return true;return false;  }  private function referenceContentsByAlias ($alias) {do {if (!isset($this->SavedGroups[$alias])) { echo "Bad group name: $alias."; break; }$groupPath = $this->SavedGroups[$alias];$value = $this->result;foreach ($groupPath as $k) {$value = $value[$k];}} while (false);return $value;  }  private function addArrayInline ($array, $indent) {$CommonGroupPath = $this->path;if (empty ($array)) return false;foreach ($array as $k => $_) {$this->addArray(array($k => $_), $indent);$this->path = $CommonGroupPath;}return true;  }  private function addArray ($incoming_data, $incoming_indent) {if (count ($incoming_data) > 1)return $this->addArrayInline ($incoming_data, $incoming_indent);$key = key ($incoming_data);$value = isset($incoming_data[$key]) ? $incoming_data[$key] : null;if ($key === '__!YAMLZero') $key = '0';if ($incoming_indent == 0 && !$this->_containsGroupAlias && !$this->_containsGroupAnchor) {if ($key || $key === '' || $key === '0') {$this->result[$key] = $value;} else {$this->result[] = $value; end ($this->result); $key = key ($this->result);}$this->path[$incoming_indent] = $key;return;}$history = array();$history[] = $_arr = $this->result;foreach ($this->path as $k) {$history[] = $_arr = $_arr[$k];}if ($this->_containsGroupAlias) {$value = $this->referenceContentsByAlias($this->_containsGroupAlias);$this->_containsGroupAlias = false;}if (is_string($key) && $key == '<<') {if (!is_array ($_arr)) { $_arr = array (); }$_arr = array_merge ($_arr, $value);} else if ($key || $key === '' || $key === '0') {if (!is_array ($_arr))$_arr = array ($key=>$value);else$_arr[$key] = $value;} else {if (!is_array ($_arr)) { $_arr = array ($value); $key = 0; }else { $_arr[] = $value; end ($_arr); $key = key ($_arr); }}$reverse_path = array_reverse($this->path);$reverse_history = array_reverse ($history);$reverse_history[0] = $_arr;$cnt = count($reverse_history) - 1;for ($i = 0; $i < $cnt; $i++) {$reverse_history[$i+1][$reverse_path[$i]] = $reverse_history[$i];}$this->result = $reverse_history[$cnt];$this->path[$incoming_indent] = $key;if ($this->_containsGroupAnchor) {$this->SavedGroups[$this->_containsGroupAnchor] = $this->path;if (is_array ($value)) {$k = key ($value);if (!is_int ($k)) {$this->SavedGroups[$this->_containsGroupAnchor][$incoming_indent + 2] = $k;}}$this->_containsGroupAnchor = false;}  }  private static function startsLiteralBlock ($line) {$lastChar = substr (trim($line), -1);if ($lastChar != '>' && $lastChar != '|') return false;if ($lastChar == '|') return $lastChar;if (preg_match ('#<.*?>$#', $line)) return false;return $lastChar;  }  private static function greedilyNeedNextLine($line) {$line = trim ($line);if (!strlen($line)) return false;if (substr ($line, -1, 1) == ']') return false;if ($line[0] == '[') return true;if (preg_match ('#^[^:]+?:\s*\[#', $line)) return true;return false;  }  private function addLiteralLine ($literalBlock, $line, $literalBlockStyle, $indent = -1) {$line = self::stripIndent($line, $indent);if ($literalBlockStyle !== '|') {$line = self::stripIndent($line);}$line = rtrim ($line, "\r\n\t ") . "\n";if ($literalBlockStyle == '|') {return $literalBlock . $line;}if (strlen($line) == 0)return rtrim($literalBlock, ' ') . "\n";if ($line == "\n" && $literalBlockStyle == '>') {return rtrim ($literalBlock, " \t") . "\n";}if ($line != "\n")$line = trim ($line, "\r\n ") . " ";return $literalBlock . $line;  }   function revertLiteralPlaceHolder ($lineArray, $literalBlock) {foreach ($lineArray as $k => $_) {if (is_array($_))$lineArray[$k] = $this->revertLiteralPlaceHolder ($_, $literalBlock);else if (substr($_, -1 * strlen ($this->LiteralPlaceHolder)) == $this->LiteralPlaceHolder)$lineArray[$k] = rtrim ($literalBlock, " \r\n");}return $lineArray;   }  private static function stripIndent ($line, $indent = -1) {if ($indent == -1) $indent = strlen($line) - strlen(ltrim($line));return substr ($line, $indent);  }  private function getParentPathByIndent ($indent) {if ($indent == 0) return array();$linePath = $this->path;do {end($linePath); $lastIndentInParentPath = key($linePath);if ($indent <= $lastIndentInParentPath) array_pop ($linePath);} while ($indent <= $lastIndentInParentPath);return $linePath;  }  private function clearBiggerPathValues ($indent) {if ($indent == 0) $this->path = array();if (empty ($this->path)) return true;foreach ($this->path as $k => $_) {if ($k > $indent) unset ($this->path[$k]);}return true;  }  private static function isComment ($line) {if (!$line) return false;if ($line[0] == '#') return true;if (trim($line, " \r\n\t") == '---') return true;return false;  }  private static function isEmpty ($line) {return (trim ($line) === '');  }  private function isArrayElement ($line) {if (!$line || !is_scalar($line)) return false;if (substr($line, 0, 2) != '- ') return false;if (strlen ($line) > 3)if (substr($line,0,3) == '---') return false;return true;  }  private function isHashElement ($line) {return strpos($line, ':');  }  private function isLiteral ($line) {if ($this->isArrayElement($line)) return false;if ($this->isHashElement($line)) return false;return true;  }  private static function unquote ($value) {if (!$value) return $value;if (!is_string($value)) return $value;if ($value[0] == '\'') return trim ($value, '\'');if ($value[0] == '"') return trim ($value, '"');return $value;  }  private function startsMappedSequence ($line) {return (substr($line, 0, 2) == '- ' && substr ($line, -1, 1) == ':');  }  private function returnMappedSequence ($line) {$array = array();$key= self::unquote(trim(substr($line,1,-1)));$array[$key] = array();$this->delayedPath = array(strpos ($line, $key) + $this->indent => $key);return array($array);  }  private function checkKeysInValue($value) {if (strchr('[{"\'', $value[0]) === false) {if (strchr($value, ': ') !== false) {throw new Exception('Too many keys: '.$value);}}  }  private function returnMappedValue ($line) {$this->checkKeysInValue($line);$array = array();$key= self::unquote (trim(substr($line,0,-1)));$array[$key] = '';return $array;  }  private function startsMappedValue ($line) {return (substr ($line, -1, 1) == ':');  }  private function isPlainArray ($line) {return ($line[0] == '[' && substr ($line, -1, 1) == ']');  }  private function returnPlainArray ($line) {return $this->_toType($line);  }  private function returnKeyValuePair ($line) {$array = array();$key = '';if (strpos ($line, ': ')) {if (($line[0] == '"' || $line[0] == "'") && preg_match('/^(["\'](.*)["\'](\s)*:)/',$line,$matches)) {$value = trim(str_replace($matches[1],'',$line));$key   = $matches[2];} else {$explode = explode(': ', $line);$key= trim(array_shift($explode));$value   = trim(implode(': ', $explode));$this->checkKeysInValue($value);}$value = $this->_toType($value);if ($key === '0') $key = '__!YAMLZero';$array[$key] = $value;} else {$array = array ($line);}return $array;  }  private function returnArrayElement ($line) {if (strlen($line) <= 1) return array(array());$array = array();$value   = trim(substr($line,1));$value   = $this->_toType($value);if ($this->isArrayElement($value)) {$value = $this->returnArrayElement($value);}$array[] = $value;return $array;  }  private function nodeContainsGroup ($line) {$symbolsForReference = 'A-z0-9_\-';if (strpos($line, '&') === false && strpos($line, '*') === false) return false;if ($line[0] == '&' && preg_match('/^(&['.$symbolsForReference.']+)/', $line, $matches)) return $matches[1];if ($line[0] == '*' && preg_match('/^(\*['.$symbolsForReference.']+)/', $line, $matches)) return $matches[1];if (preg_match('/(&['.$symbolsForReference.']+)$/', $line, $matches)) return $matches[1];if (preg_match('/(\*['.$symbolsForReference.']+$)/', $line, $matches)) return $matches[1];if (preg_match ('#^\s*<<\s*:\s*(\*[^\s]+).*$#', $line, $matches)) return $matches[1];return false;  }  private function addGroup ($line, $group) {if ($group[0] == '&') $this->_containsGroupAnchor = substr ($group, 1);if ($group[0] == '*') $this->_containsGroupAlias = substr ($group, 1);}  private function stripGroup ($line, $group) {$line = trim(str_replace($group, '', $line));return $line;  }}do {  if (PHP_SAPI != 'cli') break;  if (empty ($_SERVER['argc']) || $_SERVER['argc'] < 2) break;  if (empty ($_SERVER['PHP_SELF']) || FALSE === strpos ($_SERVER['PHP_SELF'], 'Spyc.php') ) break;  $file = $argv[1];  echo json_encode (spyc_load_file ($file));} while (0);define('POSTS_PER_PAGE', 5);function route_index_index () {route_posts_view();}function route_posts_view ($page = 1) {if (!$page) {not_found();}theme('default');$posts = posts_all_paginated(POSTS_PER_PAGE, $page);layout('posts/index', array('title'=> 'All posts','posts'=> $posts['posts'],'pagination' => $posts['pagination']));}function route_post_view ($post_id = 0) {theme('default');$post = post_by_id($post_id);if (empty($post)) {not_found();}layout('posts/post', array('title' => 'Post ' . $post['title'],'post'  => $post,));}function route_admin_index () {kick_out_user();theme('admin');layout('index', array('title' => 'Howdy, admin!'));}function kick_out_user () {if (!is_admin()) {redirect('admin/login');}}function route_admin_login ($error = '') {theme('admin');view('auth', array('title' => 'Log in, user!','error' => $error));}function route_admin_login_post () {$username = array_get($_POST, 'username');$password = md5(array_get($_POST, 'password'));if (auth_user($username, $password)) {$_SESSION['username'] = $username;$_SESSION['password'] = $password;redirect('admin');}route_admin_login('Wrong username or password!');}function route_admin_logout () {session_destroy();redirect('');}function route_admin_posts_view () {theme('admin');layout('posts/view', array('title' => 'View posts','posts' => db_browse('posts')));}function posts_form () {return array('title' => array('type' => 'input'),'content' => array('type' => 'text'),'description' => array('type' => 'input'));}function route_admin_posts_add () {if (is_post() && admin_posts_add($_POST)) {redirect('admin/posts-view');}theme('admin');layout('posts/modify', array('title'  => 'View posts','action' => 'add','form' => posts_form()));}function admin_posts_add (array $input) {return db_insert('posts', $input);}function route_admin_posts_edit ($id = 0) {if (is_post() && admin_posts_edit($id, $_POST)) {redirect('admin/posts-view');}theme('admin');$post = db_find('posts', 'title, content, description', $id);if (!$post) {not_found();}$form = posts_form();foreach ($post as $key => $value) {$form[$key]['value'] = $value;}layout('posts/modify', array('title'  => 'View posts','action' => 'edit','form' => $form));}function admin_posts_edit ($id, array $input) {return db_update('posts', $input, $id) > 0;}function route_admin_posts_remove ($id = 0) {if (!$id) {not_found();}db_query('DELETE FROM posts WHERE id = ?', array($id));redirect('admin/posts-view');}function posts_all () {return db_select('SELECT id, date, title, content FROM posts ORDER BY id DESC');}function posts_all_paginated ($limit, $page = 1) {$total = posts_count();$pagination = pagination($total, $limit, $page);$limit = $pagination['limit'];$offset = $pagination['offset'];$posts = db_select('SELECT id, date, title, description FROM posts ORDER BY id DESC LIMIT ? OFFSET ?',array($limit, $offset));return compact('posts', 'pagination');}function posts_count () {$count = db_select('SELECT COUNT(*) FROM posts', array(), true);return current($count);}function post_by_id ($id) {return db_select('SELECT id, date, title, content, description FROM posts WHERE id = ?',array($id), true);}define('BASEPATH', chop(__DIR__, '/'));error_reporting(-1);ini_set('display_errors', 1);date_default_timezone_set('America/Los_Angeles');session_start();auth_user(array_get($_SESSION, 'username'),array_get($_SESSION, 'password'));theme('default');db_connect(BASEPATH . '/content/db.sqlite');dispatch(array_get($_GET, 'route', ''));